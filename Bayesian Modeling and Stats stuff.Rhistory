
# Create a long df by choosing the columns on which to pivot and their values
df.long <- pivot_longer(data, cols=1:4, names_to = 'Fertilizer', values_to = 'Qty')


# Aggregate and Summarize a df
group_by(df.long, colname1) %>%
summarise(
count = n(),
mean = mean(colname2, na.rm = TRUE),
sd = sd(Qty, na.rm = TRUE)
)


ggboxplot(df.long, x = "Fertilizer", y = "Qty",
color = "Fertilizer", palette = c("#00AFBB", "#E7B800", "#FC4E07", "#403eb3"),
order = c("X50.g.bu", "X100.g.bu", "X200.g.bu", "X400.g.bu"),
ylab = "Qty", xlab = "Fertilizer")


df.long %>% group_by(Fertilizer) %>% summarise(n=n(),mean=round(mean(Qty),1),sd=round(sd(Qty),1)) %>% DT::datatable()


theme_set(theme_bw())
g0 <- ggplot(df.long,aes(x=Fertilizer,y=Qty))
g_box<-g0+ geom_boxplot()




g_mean<-g_mean+stat_summary(fun.data=mean_cl_normal,geom="crossbar")
labs(title = "95% Mean Confidence Intervals")

g_mean<-g0+stat_summary(fun=mean,geom="point")





# Find and Replace
df <- gsub(",","",df.long)



df.long$Fertilzer <- relevel(df.long$Fertilzer, "X50.g.bu")

df <- relevel(df, "X50.g.bu")



# Create a Long Data set from a wide one

dfl <- pivot_longer(fertilizer, cols=1:4, names_to = 'Fertilizer', values_to = 'Qty')


# Create factors and relabel at same time
dfl$Fertilizer<-factor(dfl$Fertilizer, levels = c("50 g/bu", "100 g/bu", "200 g/bu", "400 g/bu"), labels=c(1,2,3,4))


# Trick to Create Factors based on how they appear in the column since R will # first sort them in alphabetical order before creating factor levels

dfl$Fertilizer <- as.numeric(factor(dfl$Fertilizer, levels=unique(dfl$Fertilizer)))


# Makes a list of various summary data, or things needed for model
dat=list(y=df$Qty,
ind=as.numeric(df$Fertilizer),
N=length(df$Qty),
p=length(levels(df$Fertilizer)),
overall_mean=mean(df$Qty))







pooled_var="
model {
#######  Likelihood
for (i in 1:N) {                    # Loop through observations
mu[i]<-Beta[ind[i]]               # The expected values are just the group means
y[i] ~ dnorm(mu[i],tau)           # Values treated as from a single normal
}
############## Uninformative priors
for (j in 1:p) {
Beta[j]~dnorm(0,0.0001)
Effect[j]<-Beta[j]-overall_mean  ### Calculate difference from overall mean
################### Calculate pair wise differences
for (n in 1:(j-1)){
Difbeta[n,j]<-Beta[n]-Beta[j]
}
}
tau ~ dgamma(scale, rate) ## Prior for normal distribution precision.
scale ~ dunif(0, 1)       ### Hyper parameters for tau.
rate ~ dunif(0, 1)
}
"
model=jags.model(textConnection(pooled_var),data=dat)

model=jags.model(textConnection(pooled_var),data=dat)
model=jags.model(textConnection(pooled_var),data=dat)
model=jags.model(textConnection(pooled_var),data=dat)
dat

model=jags.model(textConnection(pooled_var),data=dat)
model=jags.model(textConnection(pooled_var),data=dat)

library(ggplot2)

hockpend <- read_table2("C:/Users/derek/Amazon Drive/___Work___/GA_Tech_Master/ISYE6420 Bayesian Statistics/Exams/Final Fall 2020/hockpend.dat",
col_names = FALSE)
View(hockpend)
plot(fit)
# Multiple Linear Regression Example
fit <- lm(X4 ~ X1 + X2 + X3, data=hockpend)
 # show results
# Other useful functions
coefficients(fit) # model coefficients
confint(fit, level=0.95) # CIs for model parameters
fitted(fit) # predicted values
residuals(fit) # residuals
anova(fit) # anova table
vcov(fit) # covariance matrix for model parameters
influence(fit) # regression diagnostics
# diagnostic plots
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
require(ggplot2)
require(ggiraph)
require(ggiraphExtra)
require(plyr)
ggPredict(fit,interactive = TRUE)
install.packages("ggiraphExtra")

ggPredict(fit,interactive = TRUE)
fit4=lm(X4~X1*X2*X3,data=hockpend)
summary(fit4)
ggPredict(fit4,interactive = TRUE)
# diagnostic plots
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
library("rprojroot")
root<-has_dirname("RAOS-Examples")$make_fix_file()
library("rstanarm")
install.packages("rstanarm")
install.packages("bayesboot")
install.packages("foreign")
install.packages("latex2exp")
install.packages("loo")
library("rprojroot")
library("rprojroot")
root<-has_dirname("RAOS-Examples")$make_fix_file()
library("rstanarm")
options(mc.cores = parallel::detectCores())
library("loo")
library("ggplot2")
library("bayesplot")
theme_set(bayesplot::theme_default(base_family = "sans"))
library("latex2exp")
library("foreign")
library("bayesboot")
SEED <- 1800
set.seed(SEED)
fit_bayes <- stan_glm(X4 ~ X1+X2+X3+X4, data = hockpend,
prior_intercept = normal(0, 0.2, autoscale = FALSE),
prior = normal(1, 0.2, autoscale = FALSE),
prior_aux = NULL,
seed = SEED
)



fit_bayes <- stan_glm(X4 ~ X1+X2+X3+X4, data = hockpend,
prior_intercept = normal(0, 0.2, autoscale = FALSE),
prior = normal(1, 0.2, autoscale = FALSE),
prior_aux = NULL,
seed = SEED
)
install.packages("ps")
install.packages("processx")
fit_bayes <- stan_glm(X4 ~ X1+X2+X3+X4, data = hockpend,
prior_intercept = normal(0, 0.2, autoscale = FALSE),
prior = normal(1, 0.2, autoscale = FALSE),
prior_aux = NULL,
seed = SEED
)

install.packages("ps")
install.packages("ps")
fit_bayes <- stan_glm(X4 ~ X1+X2+X3+X4, data = hockpend,
prior_intercept = normal(0, 0.2, autoscale = FALSE),
prior = normal(1, 0.2, autoscale = FALSE),
prior_aux = NULL,
seed = SEED
)

fit_bayes <- stan_glm(X4 ~ X1+X2+X3+X4, data = hockpend,
prior_intercept = normal(0, 0.2, autoscale = FALSE),
prior = normal(1, 0.2, autoscale = FALSE),
prior_aux = NULL,
seed = SEED
)

fit_bayes <- stan_glm(X4 ~ X1+X2+X3+X4, data = hockpend,
prior_intercept = normal(0, 0.2, autoscale = FALSE),
prior = normal(1, 0.2, autoscale = FALSE),
prior_aux = NULL,
seed = SEED
)

fit_bayes <- stan_glm(X4 ~ X1+X2+X3+X4, data = hockpend,
prior_intercept = normal(0, 0.2, autoscale = FALSE),
prior = normal(1, 0.2, autoscale = FALSE),
prior_aux = NULL,
seed = SEED
)
View(fit_bayes)
posterior <- as.matrix(fit_bayes, pars = c("(Intercept)", "x"))
post_means <- colMeans(posterior)
round(median(bayesR2res<-bayes_R2_res(fit_bayes)), 2)
summary(fit_bayes)
fit_bayes <- stan_glm(X4 ~ X1+X2+X3, data = hockpend,
prior_intercept = normal(0, 0.2, autoscale = FALSE),
prior = normal(1, 0.2, autoscale = FALSE),
prior_aux = NULL,
seed = SEED
)
posterior <- as.matrix(fit_bayes, pars = c("(Intercept)", "x"))
summary(fit_bayes)
fit_bayes <- stan_glm(X4 ~ X1+X2+X3, data = hockpend,
prior_intercept = normal(location = 0),
prior = normal(location = 0),
prior_aux = NULL,
seed = SEED
)
summary(fit_bayes)
View(hockpend)
help(priors, package = "rstanarm")
fit_bayes <- stan_glm(X4 ~ X1+X2+X3, data = hockpend,
prior_intercept = normal(location = 0, scale = NULL, autoscale = FALSE),
prior = normal(location = 0, scale = NULL, autoscale = FALSE),
prior_aux = NULL,
seed = SEED
)
summary(fit_bayes)
fit_bayes <- stan_glm(X4 ~ X1+X2+X3, data = hockpend,
prior_intercept = gamma(location = .01, scale = .01, autoscale = FALSE),
prior = gamma(location = .01, scale = .01, autoscale = FALSE),
prior_aux = NULL,
seed = SEED
)
fit_bayes <- stan_glm(X4 ~ X1+X2+X3, data = hockpend,
prior_intercept = NULL,
prior = NULL,
prior_aux = NULL,
seed = SEED
)
summary(fit_bayes)
bayes_R2_res <- function(fit) {
y <- rstanarm::get_y(fit)
ypred <- rstanarm::posterior_linpred(fit, transform = TRUE)
if (family(fit)$family == "binomial" && NCOL(y) == 2) {
trials <- rowSums(y)
y <- y[, 1]
ypred <- ypred %*% diag(trials)
}
e <- -1 * sweep(ypred, 2, y)
var_ypred <- apply(ypred, 1, var)
var_e <- apply(e, 1, var)
var_ypred / (var_ypred + var_e)
}
bayes_R2 <- function(fit) {
mupred <- rstanarm::posterior_linpred(fit, transform = TRUE)
var_mupred <- apply(mupred, 1, var)
if (family(fit)$family == "binomial" && NCOL(y) == 1) {
sigma2 <- apply(mupred*(1-mupred), 1, mean)
} else {
sigma2 <- as.matrix(fit, pars = c("sigma"))^2
}
var_mupred / (var_mupred + sigma2)
}
round(median(bayesR2res<-bayes_R2_res(fit_bayes)), 2)
round(median(bayesR2<-bayes_R2(fit_bayes)), 2)

anova(fit)
SSE     <- sum( fit$resid^2 )
SSE
fit$resid
posterior <- as.matrix(fit_bayes, pars = c("(Intercept)", "x"))
summary(fit_bayes)
posterior <- as.matrix(fit_bayes, pars = c("(Intercept)", "X1"))
post_means <- colMeans(posterior)
round(median(bayesR2res<-bayes_R2_res(fit_bayes)), 2)
View(posterior)
round(median(bayesR2res<-bayes_R2_res(fit_bayes)), 2)
round(median(bayesR2<-bayes_R2(fit_bayes)), 2)
View(bayes_R2)
as.matrix(fit, pars = c("sigma"))^2
as.matrix(fit, pars = c("sigma"))
as.matrix(fit)
fit
mupred <- rstanarm::posterior_linpred(fit, transform = TRUE)
View(bayes_R2)
mupred <- rstanarm::posterior_linpred(fit_bayes, transform = TRUE)
View(mupred)
View(bayes_R2)
var_mupred <- apply(mupred, 1, var)
var_mupred
sigma2 <- apply(mupred*(1-mupred), 1, mean)
sigma2
var_mupred / (var_mupred + sigma2)
round(median(var_mupred / (var_mupred + sigma2), 2)
round(median((var_mupred / (var_mupred + sigma2)), 2)
)
var_mupred / (var_mupred + sigma2)
sigma2
View(mupred)
sigma2
View(bayes_R2_res)
View(bayes_R2_res)
ypred <- rstanarm::posterior_linpred(fit_bayes, transform = TRUE)
View(ypred)
trials <- rowSums(y)
y <- rstanarm::get_y(fit_bayes)
y
trials <- rowSums(y)
e <- -1 * sweep(ypred, 2, y)
e
BaysR2=bayes_R2(fit)
BaysR2_=print(c(median(BaysR2), mean(BaysR2), sd(BaysR2)))

summary(fit_bayes)
round(median(bayesR2res<-bayes_R2_res(fit_bayes)), 2)
round(median(bayesR2<-bayes_R2(fit_bayes)), 2)
install.packages("BNPdensity")

cpo(fit_bayes)
cpo(fit)
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
cpo(fit)
cpo(fit_bayes)

inla(fit_bayes)
inla(fit)
mm<-inla(X4 ~ X1+X2+X3, data = hockpend, family = "normal")

mm<-inla(X4 ~ X1+X2+X3, data = hockpend, family = "normal",control.compute = list(cpo = TRUE, dic = TRUE, waic = TRUE))
mm
mm
mm

cpo(mm)
display(mm)

describe(mm)
mm
mm$cpo
mean(mm$cpo)
ols_plot_cooksd_bar(fit)
install.packages("olsrr")
ols_plot_cooksd_bar(fit)

ols_plot_cooksd_bar(fit)
ols_plot_cooksd_bar(bayes_fit)
ols_plot_comp_plus_resid(fit)
ols_plot_resid_fit(fit)
ols_plot_resid_fit_spread(fit)
ols_prep_dfbeta_outliers(fit)
ols_prep_outlier_obs(fit)
ols_prep_outlier_obs(fit)
k <- ols_prep_cdplot_data(fit)
ols_prep_outlier_obs(k)
round(median(bayesR2res<-bayes_R2_res(fit_bayes)), 2)
round(median(bayesR2res<-bayes_R2_res(fit_bayes)), 2)
round(median(bayesR2<-bayes_R2(fit_bayes)), 2)

